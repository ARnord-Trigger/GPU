{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[],"dockerImageVersionId":30787,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-11-17T16:56:13.152135Z","iopub.execute_input":"2024-11-17T16:56:13.152482Z"}}},{"cell_type":"code","source":"import numpy as  np\nimport pycuda.gpuarray as gpuarray\nimport pycuda.driver as drv\nimport pycuda.autoinit\nfrom pycuda.compiler import SourceModule as sm","metadata":{"execution":{"iopub.status.busy":"2024-11-17T16:56:49.354981Z","iopub.execute_input":"2024-11-17T16:56:49.355924Z","iopub.status.idle":"2024-11-17T16:56:49.484173Z","shell.execute_reply.started":"2024-11-17T16:56:49.355879Z","shell.execute_reply":"2024-11-17T16:56:49.483194Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"a = np.array([[1,2] , [3,5]])\nb = np.array([[1,1] , [3,6]])\nc = a@b \nc","metadata":{"execution":{"iopub.status.busy":"2024-11-17T16:59:31.242525Z","iopub.execute_input":"2024-11-17T16:59:31.242958Z","iopub.status.idle":"2024-11-17T16:59:31.253209Z","shell.execute_reply.started":"2024-11-17T16:59:31.242919Z","shell.execute_reply":"2024-11-17T16:59:31.252124Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"array([[ 7, 13],\n       [18, 33]])"},"metadata":{}}]},{"cell_type":"code","source":"matmul_mod = sm(\"\"\"\n__global__ void matmul(float *a , float *b , float *c , int N){\n    int tx = threadIdx.x; // Thread's x-coordinate\n    int ty = threadIdx.y; // Thread's y-coordinate\n    \n    float Pvalue = 0; // To store the result for this thread\n    \n    // Compute the dot product for the row and column\n    for (int k = 0; k < N; k++) {\n        float a_ele = a[ty * N + k];  // Get element from matrix `a`\n        float b_ele = b[k * N + tx];  // Get element from matrix `b`\n        Pvalue += a_ele * b_ele;      // Accumulate the product\n    }\n    \n    // Store the result in the output matrix\n    c[ty * N + tx] = Pvalue;\n}\n\n\n\"\"\")","metadata":{"execution":{"iopub.status.busy":"2024-11-17T17:21:02.921007Z","iopub.execute_input":"2024-11-17T17:21:02.921983Z","iopub.status.idle":"2024-11-17T17:21:03.618695Z","shell.execute_reply.started":"2024-11-17T17:21:02.921937Z","shell.execute_reply":"2024-11-17T17:21:03.617798Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"N = ","metadata":{},"execution_count":null,"outputs":[]}]}