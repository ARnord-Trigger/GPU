import pycuda.gpuarray as gpuarray
import pycuda.driver as cuda
import pycuda.autoinit
from numba import guvectorize
import numpy as np

# Using PyCUDA for element-wise operation
a_gpu = gpuarray.to_gpu(np.random.randn(5, 5).astype(np.float32))
a_doubled = (2 * a_gpu).get()

print("ORIGINAL MATRIX")
print(a_gpu)
print("DOUBLED MATRIX AFTER PyCUDA EXECUTION USING GPUARRAY CALL")
print(a_doubled)

# GPU-accelerated matrix multiplication using Numba
@guvectorize(['void(int64[:, :], int64[:, :], int64[:, :])'], '(m, n), (n, p)->(m, p)')
def matmul(A, B, C):
    m, n = A.shape
    n, p = B.shape
    for i in range(m):
        for j in range(p):
            C[i, j] = 0
            for k in range(n):
                C[i, j] += A[i, k] * B[k, j]

# Initialize random matrices
dim = 10
A = np.random.randint(dim, size=(dim, dim))
B = np.random.randint(dim, size=(dim, dim))

# Perform matrix multiplication
C = matmul(A, B)

# Display results
print("INPUT MATRIX A")
print(f" :\n{A}")
print("INPUT MATRIX B")
print(f" :\n{B}")
print("RESULT MATRIX C = A*B")
print(f" :\n{C}")
